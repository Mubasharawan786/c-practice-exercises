#ifndef DYNAMICTEMPLATE_H
# define DYNAMICTEMPLATE_H
#include<iostream>
using namespace std;

template<class T>
class DynStack 
{
private:
    struct stackNode
    {
        T value;
        stackNode* next;
    };
    stackNode* top;

public:	
    // Constructor
    DynStack() {
        top = nullptr;
    }

    // Destructor
    ~DynStack();

    // Stack operations
    void push(T);
    void pop(T&);
    bool isEmpty();
};

// Destructor
template<class T>
DynStack<T>::~DynStack()
{
    stackNode* nodePtr;
    stackNode* nextNode;
    nodePtr = top;
    while (nodePtr != nullptr)
    {
        nextNode = nodePtr->next;
        delete nodePtr;
        nodePtr = nextNode;
    }
}

// Push function of stack
template<class T>
void DynStack<T>::push(T item)
{
    stackNode* newNode = new stackNode;
    newNode->value = item;

    if (isEmpty())
    {
        top = newNode;
        newNode->next = nullptr;
    }
    else
    {
        newNode->next = top;
        top = newNode;
    }
}

// Pop function of stack
template<class T>
void DynStack<T>::pop(T& item)
{
    if (isEmpty())
    {
        cout << "The stack is empty" << endl;
    }
    else
    {
        item = top->value;
        stackNode* temp = top->next;
        delete top;
        top = temp;
    }
}

// isEmpty function
template<class T>
bool DynStack<T>::isEmpty()
{
    return (top == nullptr);
}

#endif

int main()
{
    int num = 0;
    DynStack<int> M;

    cout << "Pushing the values..." << endl;
    for (int i = 0; i < 3; i++)
    {
        M.push(i);
    }
    M.push(5);

    cout << "Retrieving the stack values..." << endl;
    for (int i = 0; i < 3; i++)
    {
        M.pop(num);
        cout << num << endl;
    }

    M.pop(num);
    cout << num << endl;

    return 0;
}
