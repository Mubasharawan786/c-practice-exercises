#ifndef LINKEDLIST_H 
#define LINKEDLIST_H 
#include<iostream>
#include<stdexcept>
 template<class T>
class LinkedList 
{
  private:
struct ListNode
{
  T value;
  struct ListNode *next;
};
ListNode *head;
public:
LinkedList( )
{
 head=nullptr;
}
~LinkedList() ;
 T& operator [](int index);
 void appendNode(T);
 void insertNode(T);
 void deleteNode(T);
 void displayList()const;
};
template<class T>
void LinkedList<T>::appendNode(T num)
{
  ListNode*newNode=new ListNode;
  newNode->value=num;
  newNode->next=nullptr;
  ListNode*nodePtr;
  if(!head)
  head=newNode;
  else
  {
     nodePtr = head;
     while(nodePtr->next)
     {
  
      nodePtr=nodePtr->next;
     }
     nodePtr->next=newNode;
    }
}    
template<class T > 
void LinkedList<T>::displayList()const 
{
    ListNode*nodePtr=head;
    while(nodePtr)
    {
     std::cout<<nodePtr->value << std:: endl;
     nodePtr=nodePtr->next;
    }
 } 

template<class T>
void LinkedList<T>::insertNode (T num) 
 { 
   ListNode *newNode; // A new node 
   ListNode *nodePtr; // To traverse the list 
   ListNode *previousNode = nullptr; // The previous node 
    // Allocate a new node and store num there. 
   newNode = new ListNode; 
   newNode->value = num; 
    // If there are no nodes in the list 
   // make newNode the first node 
   if (!head) 
   { 
    head = newNode; 
    newNode->next = nullptr; 
   } 
   else // Otherwise, insert newNode 
   { 
      // Position nodePtr at the head of list. 
      nodePtr = head; 
      // Initialize previousNode to nullptr. 
      previousNode = nullptr; 
      // Skip all nodes whose value is less than num. 
     while (nodePtr != nullptr && nodePtr->value <  num) 
     { 
      previousNode = nodePtr; 
      nodePtr = nodePtr->next; 
     } 
     // If the new node is to be the 1st in the list, 
     // insert it before all other nodes. 
     if (previousNode == nullptr) 
     { 
     head = newNode; 
     newNode->next = nodePtr; 
     }  
     else // Otherwise insert after the previous node. 
     { 
      previousNode->next = newNode; 
      newNode->next = nodePtr; 
     }  
    }  
  }  
  template<class T>
void LinkedList<T>::deleteNode ( T num)
 {
	ListNode*nodePtr;
	ListNode* previousNode;
	if(!head)
	return;
	if(head->value==num)
	{
	 nodePtr=head->next;
	 delete head;
	head=nodePtr;	
	}
	else
	{
		nodePtr=head;
		while(nodePtr!=nullptr&&nodePtr->value!=num)
		{
			previousNode=nodePtr;
			nodePtr=nodePtr->next;
		}
		if(nodePtr)
		{
			previousNode->next=nodePtr->next;
			delete nodePtr; 
		}
	}
}

 template<class T>
 T& LinkedList<T>::operator [] (int index)
 {
 	ListNode*nodePtr=head;
	int currentNode=0;
	if(index<0)
	{
		throw std::out_of_range("Invalid index: index cannot be negative");
	   }   
	 while(nodePtr!=nullptr&&currentNode<index)
	 {
	 	nodePtr=nodePtr->next;
	 	currentNode++; 
	 }
	 if(nodePtr==nullptr)
	{
		throw std::out_of_range("Invalid index: Index is out of range");
	   }   
	return nodePtr->value;
 }
 
template<class T> 
LinkedList<T>::~LinkedList()
{
	ListNode*nodePtr;
	ListNode*nextNode;
	nodePtr=head;
	while(nodePtr!=nullptr)
	{
		nextNode=nodePtr->next;
		delete nodePtr;
		nodePtr=nextNode;
	}
}
#endif        

#include<iostream>
#include<stdexcept>
using namespace std;
int main() 
{
	LinkedList<int> mylist;
	mylist.appendNode(1);
	mylist.appendNode(2);
	cout<<mylist[0]<<endl;
	cout<<mylist[1];
}
