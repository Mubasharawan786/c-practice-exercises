#ifndef STACKTEMPLATE_H
# define STACKTEMPLATE_H
#include<iostream>
using namespace std;
 template<class T>
 class staticStack
 {
 	private:
 	T*stackArray;
	T stackSize;
	int top; 	
 	public:	
 	//constructor
 	staticStack(int);
 	//copy constructor
	staticStack(const staticStack& );
	 //Destructor
 	~staticStack();
 	//stack operations
 	void push(T);
 	void pop(T&);
 	bool isEmpty();
 	bool isFull();
 };
 //constructor
 template<class T>
  staticStack<T>::staticStack(int size)
  {
  	stackArray=new T[size];
  	top=-1;
  	stackSize=size;
   }
   //copy constructor
	template<class T>
	staticStack<T>::staticStack(const staticStack &obj)
    { 
    stackArray=new T(obj.stackSize);
    stackSize=obj.stackSize;
    top=obj.top;
	 } 
   //Destructor
 template<class T>
staticStack<T>::~staticStack()
{
	delete[]stackArray;
	 
}
 //push function of stack
 template<class T>
 void staticStack<T>::push(T item)
 {
 	if(isFull())
 	{
 		cout<<"The stack is full "<<endl;
	 }
	 else
	 {
	 	top++;
	 	stackArray[top]=item;
	 }
 }
 //pop function of stack
 template<class T>
 void staticStack<T>::pop(T &item)
{
	if(isEmpty())
	{
		cout<<"The stack is empty"<<endl;
	}
	else
	{
    	item=stackArray[top];
		 top--;		
	} 
}
//isFull function
template<class T>
bool staticStack<T>::isFull()
{
	bool status;
	if(top==stackSize-1)
	status=true;
	else
	status=false;
	return status;
}
//isEmpty function
template<class T>
bool staticStack<T>::isEmpty()
{
	bool status;
	if( top<0)
	status=true;
	else
	status=false;
	return status;
}
#endif
   int main()
   {
   	const int Max=3;
    int num=0;
	staticStack<int>obj(Max);
   	cout<<"pushing the values..."<<endl;
   	for( int i=0;i< Max;i++)
   	{
   	    num=i;
	   	obj.push(num);
	   }
	   obj.push(5);
	cout<<"Retriving the stack values..."<<endl;
	   for( int i=0;i<Max;i++)
   	{
   		obj.pop( num);
   		cout<<num <<endl; 
	   }
   	  	obj.pop(num);
	   return 0;
   }