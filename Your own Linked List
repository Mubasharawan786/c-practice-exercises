#include<iostream>
using namespace std;
class LinkedList{ 
    private:
	struct ListNode{
		int value;
		ListNode *next;
	};
	ListNode*head;
	public:
	LinkedList(){
		head=nullptr;
	}	
	void appendNode(int num);	
	void insertNode(int num);
    void  deleteNode(int num);
    void displayNode()const;
	~LinkedList() ;
};

 //appending a list at the end of the list
 void LinkedList::appendNode(int num)
 {
 	ListNode*newNode=new ListNode;
 	newNode->value=num;
 	newNode->next=nullptr;
 	ListNode*nodePtr=nullptr;
 	if(!head)
 	head=newNode;
 	else
 	 {
 		 nodePtr=head;
 		 while(nodePtr->next)
 		 {
 			 nodePtr=nodePtr->next;
		    }
	      nodePtr->next=newNode; 
	    }
    }  

    // inserting a node in the middle of the list
	void LinkedList::insertNode(int num)
	{
		 ListNode*newNode=new ListNode;
		newNode->value=num;
		newNode->next=nullptr;
		ListNode*nodePtr=nullptr;
		ListNode*previousNode=nullptr;
	    if(!head)
	    head=newNode;
	    else
	   {
		 	nodePtr=head;
		 	while(nodePtr!=nullptr&&nodePtr->value<num)
		 	   {
		 		 previousNode=nodePtr;
		 		 nodePtr=nodePtr->next;
			    }
			if(previousNode==nullptr)
			    {
			    	head=newNode;
			    	newNode->next=nodePtr;
				}
			else    
			 {
				 previousNode->next=newNode;
			 	 newNode->next=nodePtr;
			    }
	    }
	 } 
	 
	 //for deleting a specific node from the list
	 void LinkedList::deleteNode(int num)
	 {
	 	ListNode*previousNode =nullptr;
	 	 ListNode*nodePtr=nullptr;
	    if(!head)
	    return;
	    if(head->value==num)
	    {
	     nodePtr=head->next;
	    delete head;
	    head=nodePtr;	
		} 
		 else
	    {
	    	nodePtr=head;
	    	while(nodePtr!=nullptr && nodePtr->value!=num)
            { 
              previousNode=nodePtr;
              nodePtr=nodePtr->next;	
			 }
			 if( nodePtr)
			 {
				 previousNode->next=nodePtr->next;
			     delete nodePtr; 
			    }	    
			 	
		}
	 }
	 
	 //for displaying the list
	 void LinkedList::displayNode()const
	 {
	 	 ListNode*nodePtr=head;
	 	 while(nodePtr)   
		 { 
		     cout<<nodePtr->value<<" ";
			 nodePtr=nodePtr->next;	
		    }
	    }
		 
	 // For destroying the  list
	 LinkedList::~LinkedList()
	 {
	 	 ListNode*nextNode=nullptr;
	 	 ListNode*nodePtr=nullptr;
	 	if(!head)
	 	return;
	 	nodePtr=head;
	 	while(nodePtr!=nullptr)
	 	{
	 		nextNode=nodePtr->next;
	 		delete nodePtr;
	 		nodePtr=nextNode; 
		 }
		  
		 cout<<"The list is distroy"<<endl;
	 }
	  
	  int main()
	  {
	  	LinkedList mylist;
	  	mylist.appendNode(8);
	  	mylist.insertNode(3);
	  	mylist.displayNode() ;
	  	cout<<endl;
	    mylist.deleteNode(8);
	    mylist.displayNode();
		cout<<endl;
		return 0;
		} 